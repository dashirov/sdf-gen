# Do not modify this file!
# Automatically generated by sdf-gen.

lua_shared_dict conjur 16k;

upstream forward-eureka {
  server eureka;
}

server {
  
  listen 127.0.0.2;
  

  location / {
    proxy_pass http://forward-eureka;

    rewrite_by_lua "
      local token = ngx.shared.conjur:get('conjur_host_token')

      -- Not cached yet, or it expired, we'll have to get a new one.
      if not token then
        -- fetch token from the conjur authn service
        local response = ngx.location.capture('/conjur/authn', {
          method = ngx.HTTP_POST,
          body   = '@CONJUR_AUTHN_API_KEY@'
        })

        if response.status >= 300 then
          -- just error out, will cause the request to fail with 500, which seems appropriate
          error('[conjur:forwarder] authn request failed with ' .. response.status)
        end

        -- base64 the body and turn it into a header we can use
        token = 'Token token=\"' .. ngx.encode_base64(response.body) .. '\"'

        -- set with an exptime of 7 minutes, just short of the lifespan of a token
        ngx.shared.conjur:set('conjur_host_token', token, 7 * 60)
      end

      ngx.req.set_header('Authorization', token)
    ";
  }

  location = /conjur/authn {
    internal;
    proxy_pass_request_headers off;
    
    proxy_ssl_verify on;
    proxy_ssl_trusted_certificate /etc/conjur.pem;
    
    proxy_pass 'https://conjur/api/authn/users/@CONJUR_AUTHN_LOGIN@/authenticate';
  }
}
